import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, CallbackQuery
import asyncio
from dotenv import dotenv_values

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config = dotenv_values(".env")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config['BOT_TOKEN'])
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class WarrantyStates(StatesGroup):
    enter_brand = State()
    enter_start_date = State()
    enter_duration = State()
    edit_choice = State()
    edit_brand = State()
    edit_date = State()
    edit_duration = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with sqlite3.connect('warranty.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS warranties (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                brand TEXT NOT NULL,
                start_date TEXT NOT NULL,
                duration_days INTEGER NOT NULL,
                notified BOOLEAN DEFAULT FALSE
            )
        ''')

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üîß –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n"
        "/list - –≤–∞—à —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π\n"
        "/edit - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏
@dp.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –±—Ä–µ–Ω–¥–∞:")
    await state.set_state(WarrantyStates.enter_brand)

@dp.message(WarrantyStates.enter_brand)
async def process_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(WarrantyStates.enter_start_date)

@dp.message(WarrantyStates.enter_start_date)
async def process_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(start_date=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –≤—Å–∫—Ä—ã—Ç–∏—è –≤ –¥–Ω—è—Ö:")
        await state.set_state(WarrantyStates.enter_duration)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")

@dp.message(WarrantyStates.enter_duration)
async def process_duration(message: Message, state: FSMContext):
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError
            
        data = await state.get_data()
        user_id = message.from_user.id
        
        with sqlite3.connect('warranty.db') as conn:
            conn.execute(
                "INSERT INTO warranties (user_id, brand, start_date, duration_days) VALUES (?, ?, ?, ?)",
                (user_id, data['brand'], data['start_date'], duration)
            )
        
        await message.answer("‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await state.clear()
        await show_warranties(message)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ ---
@dp.message(Command("edit"))
async def cmd_edit(message: Message):
    user_id = message.from_user.id
    
    with sqlite3.connect('warranty.db') as conn:
        cursor = conn.execute(
            "SELECT id, brand, start_date, duration_days FROM warranties WHERE user_id = ?",
            (user_id,)
        )
        warranties = cursor.fetchall()
    
    if not warranties:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    today = datetime.now().date()
    builder = InlineKeyboardBuilder()
    for id_, brand, start_date, duration in warranties:
        end_date = datetime.strptime(start_date, "%Y-%m-%d").date() + timedelta(days=duration)
        days_left = (end_date - today).days
        phrase = f"‚úÖ" if days_left >= 0 else f"‚ùå"
        builder.button(text=f"‚úèÔ∏è {phrase} {brand} ({start_date} - {end_date})", callback_data=f"edit_{id_}")
    
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("edit_"))
async def select_edit_field(callback: CallbackQuery, state: FSMContext):
    warranty_id = callback.data.split("_")[1]
    await state.update_data(warranty_id=warranty_id)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="field_brand")
    builder.button(text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data="field_date")
    builder.button(text="–°—Ä–æ–∫ (–¥–Ω–∏)", callback_data="field_duration")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è?",
        reply_markup=builder.as_markup()
    )
    await state.set_state(WarrantyStates.edit_choice)
    await callback.answer()

@dp.callback_query(WarrantyStates.edit_choice, F.data.startswith("field_"))
async def select_field_to_edit(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    await state.update_data(edit_field=field)
    
    if field == "brand":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await state.set_state(WarrantyStates.edit_brand)
    elif field == "date":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
        await state.set_state(WarrantyStates.edit_date)
    elif field == "duration":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –¥–Ω—è—Ö:")
        await state.set_state(WarrantyStates.edit_duration)
    
    await callback.answer()

@dp.callback_query(WarrantyStates.edit_choice, F.data == "cancel_edit")
async def cancel_editing(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()

@dp.message(WarrantyStates.edit_brand)
async def process_edit_brand(message: Message, state: FSMContext):
    data = await state.get_data()
    warranty_id = data['warranty_id']
    
    with sqlite3.connect('warranty.db') as conn:
        conn.execute(
            "UPDATE warranties SET brand = ? WHERE id = ?",
            (message.text, warranty_id)
        )
    
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    await show_warranties(message)

@dp.message(WarrantyStates.edit_date)
async def process_edit_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        data = await state.get_data()
        warranty_id = data['warranty_id']
        
        with sqlite3.connect('warranty.db') as conn:
            conn.execute(
                "UPDATE warranties SET start_date = ?, notified = FALSE WHERE id = ?",
                (message.text, warranty_id)
            )
        
        await message.answer("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()
        await show_warranties(message)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")

@dp.message(WarrantyStates.edit_duration)
async def process_edit_duration(message: Message, state: FSMContext):
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError
            
        data = await state.get_data()
        warranty_id = data['warranty_id']
        
        with sqlite3.connect('warranty.db') as conn:
            conn.execute(
                "UPDATE warranties SET duration_days = ?, notified = FALSE WHERE id = ?",
                (duration, warranty_id)
            )
        
        await message.answer("‚úÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await state.clear()
        await show_warranties(message)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

# –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏–π
@dp.message(Command("list"))
async def cmd_list(message: Message):
    await show_warranties(message)

async def show_warranties(message: Message):
    user_id = message.from_user.id
    today = datetime.now().date()
    
    with sqlite3.connect('warranty.db') as conn:
        cursor = conn.execute(
            "SELECT id, brand, start_date, duration_days FROM warranties WHERE user_id = ?",
            (user_id,)
        )
        warranties = cursor.fetchall()
    
    if not warranties:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π")
        return
    
    text = "üìã –í–∞—à —Å–ø–∏—Å–æ–∫:\n\n"
    for warranty in warranties:
        id_, brand, start_date, duration = warranty
        end_date = datetime.strptime(start_date, "%Y-%m-%d").date() + timedelta(days=duration)
        days_left = (end_date - today).days
        
        # status = "üü¢" if days_left >= 0 else "üî¥"
        phrase = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)" if days_left >= 0 else f"‚ùå –ò—Å—Ç–µ–∫–ª–æ ({abs(days_left)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)"
        text += (
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <b>{brand}</b>\n"
            # f"ID: {id_} | –î–æ: {end_date} ({abs(days_left)} –¥–Ω.)\n\n"
            f"–ù–∞—á–∞–ª–æ: {start_date}\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}\n"
            f"–°—Ç–∞—Ç—É—Å: {phrase}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

# –£–¥–∞–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏
@dp.message(Command("delete"))
async def cmd_delete(message: Message):
    user_id = message.from_user.id
    
    with sqlite3.connect('warranty.db') as conn:
        cursor = conn.execute(
            "SELECT id, brand, start_date, duration_days FROM warranties WHERE user_id = ?",
            (user_id,)
        )
        warranties = cursor.fetchall()
    
    if not warranties:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    today = datetime.now().date()
    builder = InlineKeyboardBuilder()
    for id_, brand, start_date, duration in warranties:
        end_date = datetime.strptime(start_date, "%Y-%m-%d").date() + timedelta(days=duration)
        days_left = (end_date - today).days
        phrase = f"‚úÖ" if days_left >= 0 else f"‚ùå"
        builder.button(text=f"üóëÔ∏è {phrase} {brand} ({start_date} - {end_date})", callback_data=f"delete_{id_}")
    
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("delete_"))
async def process_delete(callback: CallbackQuery):
    warranty_id = callback.data.split("_")[1]
    
    with sqlite3.connect('warranty.db') as conn:
        conn.execute("DELETE FROM warranties WHERE id = ?", (warranty_id,))
    
    await callback.message.edit_text(f"‚úÖ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await callback.answer()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π
async def check_expired_warranties():
    today = datetime.now().date()
    
    with sqlite3.connect('warranty.db') as conn:
        cursor = conn.execute('''
            SELECT id, user_id, brand FROM warranties 
            WHERE date(start_date, '+' || duration_days || ' days') < ? 
            AND notified = FALSE
        ''', (today.isoformat(),))
        
        expired = cursor.fetchall()
        
        for warranty in expired:
            id_, user_id, brand = warranty
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ {brand} –∏—Å—Ç–µ–∫!"
                )
                conn.execute("UPDATE warranties SET notified = TRUE WHERE id = ?", (id_,))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        conn.commit()

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
async def check_periodically():
    while True:
        await check_expired_warranties()
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(check_periodically())
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
